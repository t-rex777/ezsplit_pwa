/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authAuthRouteImport } from './routes/(auth)/_auth'
import { Route as appAppRouteImport } from './routes/(app)/_app'
import { Route as authAuthLoginRouteImport } from './routes/(auth)/_auth.login'
import { Route as appAppSettingsRouteImport } from './routes/(app)/_app.settings'
import { Route as appAppHomeRouteImport } from './routes/(app)/_app.home'
import { Route as appAppGroupsRouteImport } from './routes/(app)/_app.groups'
import { Route as appAppExpensesRouteImport } from './routes/(app)/_app.expenses'

const authRouteImport = createFileRoute('/(auth)')()
const appRouteImport = createFileRoute('/(app)')()

const authRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authAuthRoute = authAuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)
const appAppRoute = appAppRouteImport.update({
  id: '/_app',
  getParentRoute: () => appRoute,
} as any)
const authAuthLoginRoute = authAuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authAuthRoute,
} as any)
const appAppSettingsRoute = appAppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => appAppRoute,
} as any)
const appAppHomeRoute = appAppHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => appAppRoute,
} as any)
const appAppGroupsRoute = appAppGroupsRouteImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => appAppRoute,
} as any)
const appAppExpensesRoute = appAppExpensesRouteImport.update({
  id: '/expenses',
  path: '/expenses',
  getParentRoute: () => appAppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authAuthRouteWithChildren
  '/expenses': typeof appAppExpensesRoute
  '/groups': typeof appAppGroupsRoute
  '/home': typeof appAppHomeRoute
  '/settings': typeof appAppSettingsRoute
  '/login': typeof authAuthLoginRoute
}
export interface FileRoutesByTo {
  '/': typeof authAuthRouteWithChildren
  '/expenses': typeof appAppExpensesRoute
  '/groups': typeof appAppGroupsRoute
  '/home': typeof appAppHomeRoute
  '/settings': typeof appAppSettingsRoute
  '/login': typeof authAuthLoginRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)': typeof appRouteWithChildren
  '/(app)/_app': typeof appAppRouteWithChildren
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(app)/_app/expenses': typeof appAppExpensesRoute
  '/(app)/_app/groups': typeof appAppGroupsRoute
  '/(app)/_app/home': typeof appAppHomeRoute
  '/(app)/_app/settings': typeof appAppSettingsRoute
  '/(auth)/_auth/login': typeof authAuthLoginRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/expenses' | '/groups' | '/home' | '/settings' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/expenses' | '/groups' | '/home' | '/settings' | '/login'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(app)/_app'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(app)/_app/expenses'
    | '/(app)/_app/groups'
    | '/(app)/_app/home'
    | '/(app)/_app/settings'
    | '/(auth)/_auth/login'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRoute: typeof appRouteWithChildren
  authRoute: typeof authRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthRouteImport
      parentRoute: typeof authRoute
    }
    '/(app)/_app': {
      id: '/(app)/_app'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appAppRouteImport
      parentRoute: typeof appRoute
    }
    '/(auth)/_auth/login': {
      id: '/(auth)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authAuthLoginRouteImport
      parentRoute: typeof authAuthRoute
    }
    '/(app)/_app/settings': {
      id: '/(app)/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof appAppSettingsRouteImport
      parentRoute: typeof appAppRoute
    }
    '/(app)/_app/home': {
      id: '/(app)/_app/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof appAppHomeRouteImport
      parentRoute: typeof appAppRoute
    }
    '/(app)/_app/groups': {
      id: '/(app)/_app/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof appAppGroupsRouteImport
      parentRoute: typeof appAppRoute
    }
    '/(app)/_app/expenses': {
      id: '/(app)/_app/expenses'
      path: '/expenses'
      fullPath: '/expenses'
      preLoaderRoute: typeof appAppExpensesRouteImport
      parentRoute: typeof appAppRoute
    }
  }
}

interface appAppRouteChildren {
  appAppExpensesRoute: typeof appAppExpensesRoute
  appAppGroupsRoute: typeof appAppGroupsRoute
  appAppHomeRoute: typeof appAppHomeRoute
  appAppSettingsRoute: typeof appAppSettingsRoute
}

const appAppRouteChildren: appAppRouteChildren = {
  appAppExpensesRoute: appAppExpensesRoute,
  appAppGroupsRoute: appAppGroupsRoute,
  appAppHomeRoute: appAppHomeRoute,
  appAppSettingsRoute: appAppSettingsRoute,
}

const appAppRouteWithChildren =
  appAppRoute._addFileChildren(appAppRouteChildren)

interface appRouteChildren {
  appAppRoute: typeof appAppRouteWithChildren
}

const appRouteChildren: appRouteChildren = {
  appAppRoute: appAppRouteWithChildren,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

interface authAuthRouteChildren {
  authAuthLoginRoute: typeof authAuthLoginRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginRoute: authAuthLoginRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRoute: appRouteWithChildren,
  authRoute: authRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
