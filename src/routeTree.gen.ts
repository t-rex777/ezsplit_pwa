/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as fullscreenFullscreenRouteImport } from './routes/(fullscreen)/_fullscreen'
import { Route as authAuthRouteImport } from './routes/(auth)/_auth'
import { Route as appAppRouteImport } from './routes/(app)/_app'
import { Route as authAuthRegisterRouteImport } from './routes/(auth)/_auth.register'
import { Route as authAuthLoginRouteImport } from './routes/(auth)/_auth.login'
import { Route as appAppSettingsRouteImport } from './routes/(app)/_app.settings'
import { Route as appAppHomeRouteImport } from './routes/(app)/_app.home'
import { Route as appAppCategoriesRouteImport } from './routes/(app)/_app.categories'
import { Route as fullscreenFullscreenGroupsNewRouteImport } from './routes/(fullscreen)/_fullscreen.groups.new'
import { Route as fullscreenFullscreenGroupsIdRouteImport } from './routes/(fullscreen)/_fullscreen.groups.$id'
import { Route as fullscreenFullscreenExpensesNewRouteImport } from './routes/(fullscreen)/_fullscreen.expenses.new'
import { Route as fullscreenFullscreenExpensesIdRouteImport } from './routes/(fullscreen)/_fullscreen.expenses.$id'
import { Route as appAppGroupsListRouteImport } from './routes/(app)/_app.groups.list'
import { Route as appAppExpensesListRouteImport } from './routes/(app)/_app.expenses.list'

const fullscreenRouteImport = createFileRoute('/(fullscreen)')()
const authRouteImport = createFileRoute('/(auth)')()
const appRouteImport = createFileRoute('/(app)')()

const fullscreenRoute = fullscreenRouteImport.update({
  id: '/(fullscreen)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const fullscreenFullscreenRoute = fullscreenFullscreenRouteImport.update({
  id: '/_fullscreen',
  getParentRoute: () => fullscreenRoute,
} as any)
const authAuthRoute = authAuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)
const appAppRoute = appAppRouteImport.update({
  id: '/_app',
  getParentRoute: () => appRoute,
} as any)
const authAuthRegisterRoute = authAuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authAuthRoute,
} as any)
const authAuthLoginRoute = authAuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authAuthRoute,
} as any)
const appAppSettingsRoute = appAppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => appAppRoute,
} as any)
const appAppHomeRoute = appAppHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => appAppRoute,
} as any)
const appAppCategoriesRoute = appAppCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => appAppRoute,
} as any)
const fullscreenFullscreenGroupsNewRoute =
  fullscreenFullscreenGroupsNewRouteImport.update({
    id: '/groups/new',
    path: '/groups/new',
    getParentRoute: () => fullscreenFullscreenRoute,
  } as any)
const fullscreenFullscreenGroupsIdRoute =
  fullscreenFullscreenGroupsIdRouteImport.update({
    id: '/groups/$id',
    path: '/groups/$id',
    getParentRoute: () => fullscreenFullscreenRoute,
  } as any)
const fullscreenFullscreenExpensesNewRoute =
  fullscreenFullscreenExpensesNewRouteImport.update({
    id: '/expenses/new',
    path: '/expenses/new',
    getParentRoute: () => fullscreenFullscreenRoute,
  } as any)
const fullscreenFullscreenExpensesIdRoute =
  fullscreenFullscreenExpensesIdRouteImport.update({
    id: '/expenses/$id',
    path: '/expenses/$id',
    getParentRoute: () => fullscreenFullscreenRoute,
  } as any)
const appAppGroupsListRoute = appAppGroupsListRouteImport.update({
  id: '/groups/list',
  path: '/groups/list',
  getParentRoute: () => appAppRoute,
} as any)
const appAppExpensesListRoute = appAppExpensesListRouteImport.update({
  id: '/expenses/list',
  path: '/expenses/list',
  getParentRoute: () => appAppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof fullscreenFullscreenRouteWithChildren
  '/categories': typeof appAppCategoriesRoute
  '/home': typeof appAppHomeRoute
  '/settings': typeof appAppSettingsRoute
  '/login': typeof authAuthLoginRoute
  '/register': typeof authAuthRegisterRoute
  '/expenses/list': typeof appAppExpensesListRoute
  '/groups/list': typeof appAppGroupsListRoute
  '/expenses/$id': typeof fullscreenFullscreenExpensesIdRoute
  '/expenses/new': typeof fullscreenFullscreenExpensesNewRoute
  '/groups/$id': typeof fullscreenFullscreenGroupsIdRoute
  '/groups/new': typeof fullscreenFullscreenGroupsNewRoute
}
export interface FileRoutesByTo {
  '/': typeof fullscreenFullscreenRouteWithChildren
  '/categories': typeof appAppCategoriesRoute
  '/home': typeof appAppHomeRoute
  '/settings': typeof appAppSettingsRoute
  '/login': typeof authAuthLoginRoute
  '/register': typeof authAuthRegisterRoute
  '/expenses/list': typeof appAppExpensesListRoute
  '/groups/list': typeof appAppGroupsListRoute
  '/expenses/$id': typeof fullscreenFullscreenExpensesIdRoute
  '/expenses/new': typeof fullscreenFullscreenExpensesNewRoute
  '/groups/$id': typeof fullscreenFullscreenGroupsIdRoute
  '/groups/new': typeof fullscreenFullscreenGroupsNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)': typeof appRouteWithChildren
  '/(app)/_app': typeof appAppRouteWithChildren
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(fullscreen)': typeof fullscreenRouteWithChildren
  '/(fullscreen)/_fullscreen': typeof fullscreenFullscreenRouteWithChildren
  '/(app)/_app/categories': typeof appAppCategoriesRoute
  '/(app)/_app/home': typeof appAppHomeRoute
  '/(app)/_app/settings': typeof appAppSettingsRoute
  '/(auth)/_auth/login': typeof authAuthLoginRoute
  '/(auth)/_auth/register': typeof authAuthRegisterRoute
  '/(app)/_app/expenses/list': typeof appAppExpensesListRoute
  '/(app)/_app/groups/list': typeof appAppGroupsListRoute
  '/(fullscreen)/_fullscreen/expenses/$id': typeof fullscreenFullscreenExpensesIdRoute
  '/(fullscreen)/_fullscreen/expenses/new': typeof fullscreenFullscreenExpensesNewRoute
  '/(fullscreen)/_fullscreen/groups/$id': typeof fullscreenFullscreenGroupsIdRoute
  '/(fullscreen)/_fullscreen/groups/new': typeof fullscreenFullscreenGroupsNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/categories'
    | '/home'
    | '/settings'
    | '/login'
    | '/register'
    | '/expenses/list'
    | '/groups/list'
    | '/expenses/$id'
    | '/expenses/new'
    | '/groups/$id'
    | '/groups/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/categories'
    | '/home'
    | '/settings'
    | '/login'
    | '/register'
    | '/expenses/list'
    | '/groups/list'
    | '/expenses/$id'
    | '/expenses/new'
    | '/groups/$id'
    | '/groups/new'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(app)/_app'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(fullscreen)'
    | '/(fullscreen)/_fullscreen'
    | '/(app)/_app/categories'
    | '/(app)/_app/home'
    | '/(app)/_app/settings'
    | '/(auth)/_auth/login'
    | '/(auth)/_auth/register'
    | '/(app)/_app/expenses/list'
    | '/(app)/_app/groups/list'
    | '/(fullscreen)/_fullscreen/expenses/$id'
    | '/(fullscreen)/_fullscreen/expenses/new'
    | '/(fullscreen)/_fullscreen/groups/$id'
    | '/(fullscreen)/_fullscreen/groups/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRoute: typeof appRouteWithChildren
  authRoute: typeof authRouteWithChildren
  fullscreenRoute: typeof fullscreenRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(fullscreen)': {
      id: '/(fullscreen)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof fullscreenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(fullscreen)/_fullscreen': {
      id: '/(fullscreen)/_fullscreen'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof fullscreenFullscreenRouteImport
      parentRoute: typeof fullscreenRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthRouteImport
      parentRoute: typeof authRoute
    }
    '/(app)/_app': {
      id: '/(app)/_app'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appAppRouteImport
      parentRoute: typeof appRoute
    }
    '/(auth)/_auth/register': {
      id: '/(auth)/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authAuthRegisterRouteImport
      parentRoute: typeof authAuthRoute
    }
    '/(auth)/_auth/login': {
      id: '/(auth)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authAuthLoginRouteImport
      parentRoute: typeof authAuthRoute
    }
    '/(app)/_app/settings': {
      id: '/(app)/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof appAppSettingsRouteImport
      parentRoute: typeof appAppRoute
    }
    '/(app)/_app/home': {
      id: '/(app)/_app/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof appAppHomeRouteImport
      parentRoute: typeof appAppRoute
    }
    '/(app)/_app/categories': {
      id: '/(app)/_app/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof appAppCategoriesRouteImport
      parentRoute: typeof appAppRoute
    }
    '/(fullscreen)/_fullscreen/groups/new': {
      id: '/(fullscreen)/_fullscreen/groups/new'
      path: '/groups/new'
      fullPath: '/groups/new'
      preLoaderRoute: typeof fullscreenFullscreenGroupsNewRouteImport
      parentRoute: typeof fullscreenFullscreenRoute
    }
    '/(fullscreen)/_fullscreen/groups/$id': {
      id: '/(fullscreen)/_fullscreen/groups/$id'
      path: '/groups/$id'
      fullPath: '/groups/$id'
      preLoaderRoute: typeof fullscreenFullscreenGroupsIdRouteImport
      parentRoute: typeof fullscreenFullscreenRoute
    }
    '/(fullscreen)/_fullscreen/expenses/new': {
      id: '/(fullscreen)/_fullscreen/expenses/new'
      path: '/expenses/new'
      fullPath: '/expenses/new'
      preLoaderRoute: typeof fullscreenFullscreenExpensesNewRouteImport
      parentRoute: typeof fullscreenFullscreenRoute
    }
    '/(fullscreen)/_fullscreen/expenses/$id': {
      id: '/(fullscreen)/_fullscreen/expenses/$id'
      path: '/expenses/$id'
      fullPath: '/expenses/$id'
      preLoaderRoute: typeof fullscreenFullscreenExpensesIdRouteImport
      parentRoute: typeof fullscreenFullscreenRoute
    }
    '/(app)/_app/groups/list': {
      id: '/(app)/_app/groups/list'
      path: '/groups/list'
      fullPath: '/groups/list'
      preLoaderRoute: typeof appAppGroupsListRouteImport
      parentRoute: typeof appAppRoute
    }
    '/(app)/_app/expenses/list': {
      id: '/(app)/_app/expenses/list'
      path: '/expenses/list'
      fullPath: '/expenses/list'
      preLoaderRoute: typeof appAppExpensesListRouteImport
      parentRoute: typeof appAppRoute
    }
  }
}

interface appAppRouteChildren {
  appAppCategoriesRoute: typeof appAppCategoriesRoute
  appAppHomeRoute: typeof appAppHomeRoute
  appAppSettingsRoute: typeof appAppSettingsRoute
  appAppExpensesListRoute: typeof appAppExpensesListRoute
  appAppGroupsListRoute: typeof appAppGroupsListRoute
}

const appAppRouteChildren: appAppRouteChildren = {
  appAppCategoriesRoute: appAppCategoriesRoute,
  appAppHomeRoute: appAppHomeRoute,
  appAppSettingsRoute: appAppSettingsRoute,
  appAppExpensesListRoute: appAppExpensesListRoute,
  appAppGroupsListRoute: appAppGroupsListRoute,
}

const appAppRouteWithChildren =
  appAppRoute._addFileChildren(appAppRouteChildren)

interface appRouteChildren {
  appAppRoute: typeof appAppRouteWithChildren
}

const appRouteChildren: appRouteChildren = {
  appAppRoute: appAppRouteWithChildren,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

interface authAuthRouteChildren {
  authAuthLoginRoute: typeof authAuthLoginRoute
  authAuthRegisterRoute: typeof authAuthRegisterRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginRoute: authAuthLoginRoute,
  authAuthRegisterRoute: authAuthRegisterRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface fullscreenFullscreenRouteChildren {
  fullscreenFullscreenExpensesIdRoute: typeof fullscreenFullscreenExpensesIdRoute
  fullscreenFullscreenExpensesNewRoute: typeof fullscreenFullscreenExpensesNewRoute
  fullscreenFullscreenGroupsIdRoute: typeof fullscreenFullscreenGroupsIdRoute
  fullscreenFullscreenGroupsNewRoute: typeof fullscreenFullscreenGroupsNewRoute
}

const fullscreenFullscreenRouteChildren: fullscreenFullscreenRouteChildren = {
  fullscreenFullscreenExpensesIdRoute: fullscreenFullscreenExpensesIdRoute,
  fullscreenFullscreenExpensesNewRoute: fullscreenFullscreenExpensesNewRoute,
  fullscreenFullscreenGroupsIdRoute: fullscreenFullscreenGroupsIdRoute,
  fullscreenFullscreenGroupsNewRoute: fullscreenFullscreenGroupsNewRoute,
}

const fullscreenFullscreenRouteWithChildren =
  fullscreenFullscreenRoute._addFileChildren(fullscreenFullscreenRouteChildren)

interface fullscreenRouteChildren {
  fullscreenFullscreenRoute: typeof fullscreenFullscreenRouteWithChildren
}

const fullscreenRouteChildren: fullscreenRouteChildren = {
  fullscreenFullscreenRoute: fullscreenFullscreenRouteWithChildren,
}

const fullscreenRouteWithChildren = fullscreenRoute._addFileChildren(
  fullscreenRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRoute: appRouteWithChildren,
  authRoute: authRouteWithChildren,
  fullscreenRoute: fullscreenRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
